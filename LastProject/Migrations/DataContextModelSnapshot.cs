// <auto-generated />
using System;
using LastProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LastProject.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("LastProject.Models.Acct", b =>
                {
                    b.Property<int>("AcctId")
                        .ValueGeneratedOnAdd();

                    b.Property<char>("AcctCat");

                    b.Property<char>("CustCat");

                    b.Property<int>("CustId");

                    b.Property<DateTime>("OpenDate");

                    b.HasKey("AcctId");

                    b.ToTable("Acct");
                });

            modelBuilder.Entity("LastProject.Models.AcctPos", b =>
                {
                    b.Property<int>("AcctPostId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcctId");

                    b.Property<double>("Balance");

                    b.Property<DateTime>("Date");

                    b.HasKey("AcctPostId");

                    b.HasIndex("AcctId");

                    b.ToTable("AcctPos");
                });

            modelBuilder.Entity("LastProject.Models.Cust", b =>
                {
                    b.Property<int>("CustId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bin")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CustId");

                    b.ToTable("Cust");
                });

            modelBuilder.Entity("LastProject.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcctId");

                    b.Property<string>("Contract")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<char>("CustCat");

                    b.Property<int>("CustId");

                    b.HasKey("LoanId");

                    b.HasIndex("AcctId")
                        .IsUnique();

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("LastProject.Models.Op", b =>
                {
                    b.Property<int>("OpId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<DateTime>("OpDate");

                    b.HasKey("OpId");

                    b.ToTable("Op");
                });

            modelBuilder.Entity("LastProject.Models.OpEntry", b =>
                {
                    b.Property<int>("OpEntryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccrCrAcctId");

                    b.Property<int>("AcctDbAcctId");

                    b.Property<double>("Balance");

                    b.Property<int>("OpId");

                    b.Property<DateTime>("OpenDate");

                    b.HasKey("OpEntryId");

                    b.HasIndex("AccrCrAcctId");

                    b.HasIndex("AcctDbAcctId");

                    b.HasIndex("OpId");

                    b.ToTable("OpEntry");
                });

            modelBuilder.Entity("LastProject.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("NameLast")
                        .IsRequired();

                    b.Property<DateTime>("OpenDate");

                    b.HasKey("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LastProject.Models.AcctPos", b =>
                {
                    b.HasOne("LastProject.Models.Acct", "Acct")
                        .WithMany("AcctPos")
                        .HasForeignKey("AcctId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LastProject.Models.Loan", b =>
                {
                    b.HasOne("LastProject.Models.Acct", "Acct")
                        .WithOne("Loan")
                        .HasForeignKey("LastProject.Models.Loan", "AcctId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LastProject.Models.OpEntry", b =>
                {
                    b.HasOne("LastProject.Models.Acct", "AccrCr")
                        .WithMany()
                        .HasForeignKey("AccrCrAcctId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LastProject.Models.Acct", "AcctDb")
                        .WithMany()
                        .HasForeignKey("AcctDbAcctId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LastProject.Models.Op", "Op")
                        .WithMany("OpEntries")
                        .HasForeignKey("OpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
